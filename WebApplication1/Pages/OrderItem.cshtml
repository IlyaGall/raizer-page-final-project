@page
@model WebApplication1.Pages.OrderItemModel
@{
    ViewData["Title"] = "Заказы";
}

@Html.AntiForgeryToken()
<div class="container">
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header bg-secondary text-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5>Заказы</h5>
                    </div>
                </div>
                <div class="card-body">
                    <div id="ordersList">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Загрузка...</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            loadOrders();
        });

        function loadOrders() {
            fetch(`?handler=OrderUser&userId=@Model.Order.UserId`)
                .then(response => {
                    if (!response.ok) throw new Error('Network response was not ok');
                    return response.json();
                })
                .then(data => renderOrders(data))
                .catch(error => {
                    console.error('Error:', error);
                    const container = document.getElementById('ordersList');
                    if (container) {
                        container.innerHTML =
                            `<div class="alert alert-danger">
                                        Не удалось загрузить список заказов. <button onclick="loadOrders()" class="btn btn-link">Попробовать снова</button>
                                    </div>`;
                    }
                });
        }

        // Вспомогательная функция для показа сообщений
        function showSuccessMessage(message) {
            const alertDiv = document.createElement('div');
            alertDiv.className = 'alert alert-success alert-dismissible fade show';
            alertDiv.setAttribute('role', 'alert');
            alertDiv.innerHTML = `${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>`;

            const container = document.querySelector('.container');
            if (container) {
                container.insertBefore(alertDiv, container.firstChild);
            }
        }

        function renderOrders(orders) {
            const container = document.getElementById('ordersList');

            if (!container) return;

            if (!orders || orders.length === 0) {
                container.innerHTML = `<div class="alert alert-info"> У вас пока нет оформленных заказов </div>`;
                return;
            }

            let html = `
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead class="table-light">
                            <tr>
                                <th>Количество позиций</th>
                                <th>Дата заказа</th>
                                <th>Дата доставки</th>
                                <th>Способ оплаты</th>
                                <th>Адрес доставки</th>
                                <th>Статус заказа</th>
                                <th>Дата изменения статуса</th>
                            </tr>
                        </thead>
                        <tbody>`;

            orders.forEach(order => {
                html += `
                    <tr>
                        <td>${order.count || 'Не указано'}</td>
                        <td>${order.dateCreated || 'Не указана'}</td>
                        <td>${order.arriveDate || 'Не указана'}</td>
                        <td>${order.shippingMethod || 'Не указан'}</td>
                        <td>${order.arriveAddress || 'Не указан'}</td>
                        <td>${order.orderStatus || 'Не указан'}</td>
                        <td>${order.dateOrderStatus || 'Не указана'}</td>
                        <td>
                            <div class="btn-group btn-group-sm">
                                <button class="btn btn-outline-primary edit-order"
                                    data-id="${order.id}"
                                    data-orderstatus="${order.orderstatus || ''}"
                                    title="Изменить статус">
                                    <i class="fas fa-edit"></i>
                                </button>
                            </div>
                        </td>
                    </tr>`;
            });

            html += `
                    </tbody>
                </table>
            </div>`;

            container.innerHTML = html;

            // Обработчики для кнопок редактирования
            document.querySelectorAll('.edit-order').forEach(btn => {
                btn.addEventListener('click', function () {
                    const order = {
                        id: this.getAttribute('data-id'),
                        orderstatus: this.getAttribute('data-orderstatus')
                    };
                    openEditOrderModal(order);
                });
            });
        }
    </script>
}