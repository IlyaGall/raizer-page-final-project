@page "{id}"
@model WebApplication1.Pages.ShopManagementModel
@{
    ViewData["Title"] = "Управление магазином";
}
@Html.AntiForgeryToken()
<div class="container">
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="row">
        <div class="col-md-4">
            <div class="card mb-4">
                <div class="card-header bg-primary text-white">
                    <h4>@Model.Shop.Name</h4>
                </div>
                <div class="card-body">
                    <p><strong>Описание:</strong> <span id="shopDescription">@Model.Shop.Description</span></p>
                    <p><strong>Адрес:</strong> <span id="shopAddress">@Model.Shop.Adress</span></p>
                    <p><strong>Контакты:</strong> <span id="shopContactInfo">@Model.Shop.ContactInfo</span></p>
                    <button class="btn btn-outline-primary btn-sm" data-bs-toggle="modal" data-bs-target="#editShopModal">
                        <i class="fas fa-edit"></i> Редактировать
                    </button>
                </div>
            </div>

            <!-- Блок менеджеров остается без изменений -->
            <div class="card mb-4">
                <div class="card-header bg-secondary text-white">
                    <h5>Менеджеры магазина</h5>
                </div>
                <div class="card-body">
                    <div id="managersList">
                        <!-- Список менеджеров будет загружен через JS -->
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Загрузка...</span>
                        </div>
                    </div>
                    <button class="btn btn-success btn-sm mt-2" data-bs-toggle="modal" data-bs-target="#addManagerModal">
                        <i class="fas fa-plus"></i> Добавить менеджера
                    </button>
                </div>
            </div>

        </div>

        <div class="col-md-8">
            <div class="card">
                <div class="card-header bg-secondary text-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5>Товары магазина</h5>
                        <button class="btn btn-success btn-sm" data-bs-toggle="modal" data-bs-target="#addProductModal">
                            <i class="fas fa-plus"></i> Добавить товар
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div id="productsList">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Загрузка...</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно редактирования магазина -->
<div class="modal fade" id="editShopModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Редактировать магазин</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editShopForm">
                    <div class="mb-3">
                        <label for="shopName" class="form-label">Название</label>
                        <input type="text" class="form-control" id="shopName" value="@Model.Shop.Name" required>
                    </div>
                    <div class="mb-3">
                        <label for="shopDescription" class="form-label">Описание</label>
                        <textarea class="form-control" id="shopDescriptionEdit" rows="3" required>@Model.Shop.Description</textarea>
                    </div>
                    <div class="mb-3">
                        <label for="shopAddress" class="form-label">Адрес</label>
                        <input type="text" class="form-control" id="shopAddressEdit" value="@Model.Shop.Adress" required>
                    </div>
                    <div class="mb-3">
                        <label for="shopContactInfo" class="form-label">Контактная информация</label>
                        <input type="text" class="form-control" id="shopContactInfoEdit" value="@Model.Shop.ContactInfo" required>
                    </div>
                    <input type="hidden" id="shopId" value="@Model.Shop.Id">
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                <button type="button" class="btn btn-primary" id="saveShopBtn">Сохранить</button>
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно добавления товара -->
<div class="modal fade" id="addProductModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Добавить товар</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addProductForm">
                    <div class="mb-3">
                        <label for="productName" class="form-label">Название</label>
                        <input type="text" class="form-control" id="productName" required>
                    </div>
                    <div class="mb-3">
                        <label for="productPrice" class="form-label">Цена</label>
                        <input type="number" class="form-control" id="productPrice" required>
                    </div>
                    <div class="mb-3">
                        <label for="productDescription" class="form-label">Описание</label>
                        <textarea class="form-control" id="productDescription" rows="3"></textarea>
                    </div>
                    <input type="hidden" id="productShopId" value="@Model.Shop.Id">
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                <button type="button" class="btn btn-primary" id="saveProductBtn">Добавить</button>
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно редактирования товара -->
<div class="modal fade" id="editProductModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Редактировать товар</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editProductForm">
                    <div class="mb-3">
                        <label for="editProductName" class="form-label">Название</label>
                        <input type="text" class="form-control" id="editProductName" required>
                    </div>
                    <div class="mb-3">
                        <label for="editProductPrice" class="form-label">Цена</label>
                        <input type="number" class="form-control" id="editProductPrice" required>
                    </div>
                    <div class="mb-3">
                        <label for="editProductDescription" class="form-label">Описание</label>
                        <textarea class="form-control" id="editProductDescription" rows="3"></textarea>
                    </div>
                    <input type="hidden" id="editProductId">
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                <button type="button" class="btn btn-primary" id="updateProductBtn">Сохранить</button>
            </div>
        </div>
    </div>
    </div>

<!-- Модальное окно добавления менеджера -->
<div class="modal fade" id="addManagerModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">Добавить менеджера</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addManagerForm">
                    <div class="mb-3">
                        <label for="managerEmail" class="form-label">Email пользователя</label>
                        <input type="email" class="form-control" id="managerEmail" required>
                    </div>
                    <input type="hidden" id="shopId" value="@Model.Shop.Id">
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                <button type="button" class="btn btn-primary" id="saveManagerBtn">Добавить</button>
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно подтверждения удаления менеджера -->
<div class="modal fade" id="confirmRemoveManagerModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">Удаление менеджера</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Вы уверены, что хотите удалить этого менеджера?</p>
                <p id="managerToRemoveInfo"></p>
                <input type="hidden" id="managerToRemoveId">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                <button type="button" class="btn btn-danger" id="confirmRemoveManagerBtn">Удалить</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
               document.addEventListener('DOMContentLoaded', function() {
            loadProducts();
            loadManagers();

            // Обработчики кнопок
            document.getElementById('saveShopBtn').addEventListener('click', updateShop);
            document.getElementById('saveProductBtn').addEventListener('click', addProduct);
            document.getElementById('updateProductBtn').addEventListener('click', updateProduct);
            document.getElementById('saveManagerBtn').addEventListener('click', addManager);
        });

        function loadProducts() {
            fetch(`?handler=Products&shopId=@Model.Shop.Id`)
                .then(response => {
                    if (!response.ok) throw new Error('Network response was not ok');
                    return response.json();
                })
                .then(data => renderProducts(data))
                .catch(error => {
                    console.error('Error:', error);
                    const container = document.getElementById('productsList');
                    if (container) {
                        container.innerHTML = `
                            <div class="alert alert-danger">
                                Не удалось загрузить список товаров. <button onclick="loadProducts()" class="btn btn-link">Попробовать снова</button>
                            </div>
                        `;
                    }
                });
        }

        function loadManagers() {
            fetch(`?handler=Managers&shopId=@Model.Shop.Id`)
                .then(response => {
                    if (!response.ok) throw new Error('Network response was not ok');
                    return response.json();
                })
                .then(data => renderManagers(data))
                .catch(error => {
                    console.error('Error:', error);
                    const container = document.getElementById('managersList');
                    if (container) {
                        container.innerHTML = `
                            <div class="alert alert-danger">
                                Не удалось загрузить список менеджеров. <button onclick="loadManagers()" class="btn btn-link">Попробовать снова</button>
                            </div>
                        `;
                    }
                });
        }

        function addManager() {
            const email = document.getElementById('managerEmail').value.trim();
            const shopId = document.getElementById('shopId').value;

            if (!email) {
                alert('Пожалуйста, введите email менеджера');
                return;
            }

            fetch(`?handler=AddManager`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ shopId, email })
            })
            .then(response => {
                if (response.ok) {
                    $('#addManagerModal').modal('hide');
                    document.getElementById('managerEmail').value = '';
                    loadManagers();
                } else {
                    return response.text().then(text => { throw new Error(text) });
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert(`Ошибка при добавлении менеджера: ${error.message}`);
            });
        }

                  function updateShop() {
            // Получаем токен безопасности
            const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
            if (!tokenElement) {
                console.error('Anti-forgery token not found');
                alert('Ошибка безопасности. Пожалуйста, обновите страницу.');
                return;
            }

            // Получаем данные формы
            const shopData = {
                id: document.getElementById('shopId')?.value,
                name: document.getElementById('shopName')?.value,
                description: document.getElementById('shopDescriptionEdit')?.value,
                address: document.getElementById('shopAddressEdit')?.value,
                contactInfo: document.getElementById('shopContactInfoEdit')?.value
            };

            // Проверяем заполненность полей
            if (!shopData.name || !shopData.description || !shopData.address || !shopData.contactInfo) {
                alert('Пожалуйста, заполните все обязательные поля');
                return;
            }

            // Отправляем данные на сервер
            fetch('?handler=UpdateShop', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': tokenElement.value
                },
                body: JSON.stringify(shopData)
            })
            .then(response => {
                if (!response.ok) throw new Error('Ошибка сервера: ' + response.status);
                return response;
            })
            .then(() => {
                $('#editShopModal').modal('hide');
                // Обновляем данные на странице
                document.querySelector('.card-header h4').textContent = shopData.name;
                document.getElementById('shopDescription').textContent = shopData.description;
                document.getElementById('shopAddress').textContent = shopData.address;
                document.getElementById('shopContactInfo').textContent = shopData.contactInfo;

                // Показываем сообщение об успехе
                alert('Данные магазина успешно обновлены');
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Ошибка при обновлении магазина: ' + error.message);
            });
        }

        // Вспомогательная функция для показа сообщений
        function showSuccessMessage(message) {
            const alertDiv = document.createElement('div');
            alertDiv.className = 'alert alert-success alert-dismissible fade show';
            alertDiv.setAttribute('role', 'alert');
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;

            const container = document.querySelector('.container');
            if (container) {
                container.insertBefore(alertDiv, container.firstChild);
            }
        }
        function addProduct() {
            const productData = {
                name: document.getElementById('productName').value,
                price: document.getElementById('productPrice').value,
                description: document.getElementById('productDescription').value,
                shopId: document.getElementById('productShopId').value
            };

            fetch('?handler=SaveProduct', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify(productData)
            })
            .then(response => {
                if (response.ok) {
                    $('#addProductModal').modal('hide');
                    document.getElementById('addProductForm').reset();
                    loadProducts();
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Ошибка при добавлении товара');
            });
        }

        function openEditProductModal(product) {
            document.getElementById('editProductName').value = product.name;
            document.getElementById('editProductPrice').value = product.price;
            document.getElementById('editProductDescription').value = product.description || '';
            document.getElementById('editProductId').value = product.id;
            $('#editProductModal').modal('show');
        }

        function updateProduct() {
            const productData = {
                id: document.getElementById('editProductId').value,
                name: document.getElementById('editProductName').value,
                price: document.getElementById('editProductPrice').value,
                description: document.getElementById('editProductDescription').value
            };

            fetch('?handler=UpdateProduct', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify(productData)
            })
            .then(response => {
                if (response.ok) {
                    $('#editProductModal').modal('hide');
                    loadProducts();
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Ошибка при обновлении товара');
            });
        }

        function renderProducts(products) {
            const container = document.getElementById('productsList');

            if (!container) return;

            if (!products || products.length === 0) {
                container.innerHTML = `
                    <div class="alert alert-info">
                        В магазине пока нет товаров.
                    </div>
                `;
                return;
            }

            let html = `
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead class="table-light">
                            <tr>
                                <th>Название</th>
                                <th>Цена</th>
                                <th>Описание</th>
                                <th>Действия</th>
                            </tr>
                        </thead>
                        <tbody>
            `;

            products.forEach(product => {
                html += `
                    <tr>
                        <td>${product.name || 'Не указано'}</td>
                        <td>${product.price ? `${product.price} ₽` : 'Не указана'}</td>
                        <td>${product.description || 'Нет описания'}</td>
                        <td>
                            <div class="btn-group btn-group-sm">
                                <button class="btn btn-outline-primary edit-product" data-id="${product.id}"
                                    data-name="${product.name}"
                                    data-price="${product.price}"
                                    data-description="${product.description || ''}">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-outline-danger delete-product" data-id="${product.id}">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                `;
            });

            html += `
                        </tbody>
                    </table>
                </div>
            `;

            container.innerHTML = html;

            // Обработчики для кнопок
            document.querySelectorAll('.edit-product').forEach(btn => {
                btn.addEventListener('click', function() {
                    const product = {
                        id: this.getAttribute('data-id'),
                        name: this.getAttribute('data-name'),
                        price: this.getAttribute('data-price'),
                        description: this.getAttribute('data-description')
                    };
                    openEditProductModal(product);
                });
            });

            document.querySelectorAll('.delete-product').forEach(btn => {
                btn.addEventListener('click', function() {
                    const productId = this.getAttribute('data-id');
                    if (confirm('Вы уверены, что хотите удалить этот товар?')) {
                        deleteProduct(productId);
                    }
                });
            });
        }

        function renderManagers(managers) {
            const container = document.getElementById('managersList');

            if (!container) return;

            if (!managers || managers.length === 0) {
                container.innerHTML = `
                    <div class="alert alert-info">
                        В магазине пока нет менеджеров
                    </div>
                `;
                return;
            }

            let html = '<div class="list-group">';

            managers.forEach(manager => {
                html += `
                    <div class="list-group-item d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="mb-1">${manager.name || manager.email}</h6>
                            <small class="text-muted">${manager.email}</small>
                        </div>
                        <div>
                            <button class="btn btn-sm btn-outline-danger remove-manager"
                                    data-id="${manager.id}"
                                    data-email="${manager.email}"
                                    data-name="${manager.name || ''}">
                                <i class="fas fa-user-times"></i>
                            </button>
                        </div>
                    </div>
                `;
            });

            html += '</div>';
            container.innerHTML = html;

            // Обработчики для кнопок удаления
            document.querySelectorAll('.remove-manager').forEach(btn => {
                btn.addEventListener('click', function() {
                    const managerId = this.getAttribute('data-id');
                    const managerEmail = this.getAttribute('data-email');
                    const managerName = this.getAttribute('data-name');

                    // Заполняем модальное окно подтверждения
                    document.getElementById('managerToRemoveId').value = managerId;
                    document.getElementById('managerToRemoveInfo').textContent =
                        `${managerName ? managerName + ' (' + managerEmail + ')' : managerEmail}`;

                    // Показываем модальное окно
                    $('#confirmRemoveManagerModal').modal('show');
                });
            });
        }
        function deleteProduct(productId) {
            fetch(`?handler=DeleteProduct&productId=${productId}`, {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
            .then(response => {
                if (response.ok) {
                    loadProducts();
                } else {
                    alert('Не удалось удалить товар');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Произошла ошибка при удалении товара');
            });
        }

      
                // Обработчик подтверждения удаления менеджера
        document.getElementById('confirmRemoveManagerBtn').addEventListener('click', function() {
            const managerId = document.getElementById('managerToRemoveId').value;
            removeManager(managerId);
            $('#confirmRemoveManagerModal').modal('hide');
        });

        // Функция removeManager остается без изменений
        function removeManager(managerId) {
            fetch(`?handler=RemoveManager&managerId=${managerId}&shopId=@Model.Shop.Id`, {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
            .then(response => {
                if (response.ok) {
                    loadManagers();
                } else {
                    alert('Не удалось удалить менеджера');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Произошла ошибка при удалении менеджера');
            });
        }
    </script>
}