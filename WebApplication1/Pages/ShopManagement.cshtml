@page "{id}"
@model WebApplication1.Pages.ShopManagementModel
@{
	ViewData["Title"] = "Управление магазином";
}
<div class="container">
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="row">
        <div class="col-md-4">
            <div class="card mb-4">
                <div class="card-header bg-primary text-white">
                    <h4>@Model.Shop.Name</h4>
                </div>
                <div class="card-body">
                    <p><strong>Описание:</strong> @Model.Shop.Description</p>
                    <p><strong>Адрес:</strong> @Model.Shop.Adress</p>
                    <p><strong>Контакты:</strong> @Model.Shop.ContactInfo</p>
                    <a href="/EditShop/@Model.Shop.Id" class="btn btn-outline-primary btn-sm">Редактировать</a>
                </div>
            </div>

            <div class="card mb-4">
                <div class="card-header bg-secondary text-white">
                    <h5>Менеджеры магазина</h5>
                </div>
                <div class="card-body">
                    <div id="managersList">
                        <!-- Список менеджеров будет загружен через JS -->
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Загрузка...</span>
                        </div>
                    </div>
                    <button class="btn btn-success btn-sm mt-2" data-bs-toggle="modal" data-bs-target="#addManagerModal">
                        <i class="fas fa-plus"></i> Добавить менеджера
                    </button>
                </div>
            </div>
        </div>

        <div class="col-md-8">
            <div class="card">
                <div class="card-header bg-secondary text-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5>Товары магазина</h5>
                        <a href="/AddProduct/@Model.Shop.Id" class="btn btn-success btn-sm">
                            <i class="fas fa-plus"></i> Добавить товар
                        </a>
                    </div>
                </div>
                <div class="card-body">
                    <div id="productsList">
                        <!-- Список товаров будет загружен через JS -->
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Загрузка...</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно для добавления менеджера -->
<div class="modal fade" id="addManagerModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Добавить менеджера</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addManagerForm">
                    <div class="mb-3">
                        <label for="managerEmail" class="form-label">Email пользователя</label>
                        <input type="email" class="form-control" id="managerEmail" required>
                    </div>
                    <input type="hidden" id="shopId" value="@Model.Shop.Id">
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                <button type="button" class="btn btn-primary" id="saveManagerBtn">Добавить</button>
            </div>
        </div>
    </div>
</div>



@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            loadProducts();
            loadManagers();

            // Обработчик добавления менеджера
            document.getElementById('saveManagerBtn').addEventListener('click', function() {
                addManager();
            });
        });

        function loadProducts() {
            fetch(`?handler=Products&shopId=@Model.Shop.Id`)
                .then(response => {
                    if (!response.ok) throw new Error('Network response was not ok');
                    return response.json();
                })
                .then(data => renderProducts(data))
                .catch(error => {
                    console.error('Error:', error);
                    document.getElementById('productsList').innerHTML = `
                        <div class="alert alert-danger">
                            Не удалось загрузить список товаров. <button onclick="loadProducts()" class="btn btn-link">Попробовать снова</button>
                        </div>
                    `;
                });
        }

        function loadManagers() {
            fetch(`?handler=Managers&shopId=@Model.Shop.Id`)
                .then(response => {
                    if (!response.ok) throw new Error('Network response was not ok');
                    return response.json();
                })
                .then(data => renderManagers(data))
                .catch(error => {
                    console.error('Error:', error);
                    document.getElementById('managersList').innerHTML = `
                        <div class="alert alert-danger">
                            Не удалось загрузить список менеджеров. <button onclick="loadManagers()" class="btn btn-link">Попробовать снова</button>
                        </div>
                    `;
                });
        }

        function addManager() {
            const email = document.getElementById('managerEmail').value.trim();
            const shopId = document.getElementById('shopId').value;

            if (!email) {
                alert('Пожалуйста, введите email менеджера');
                return;
            }

            fetch(`?handler=AddManager`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ shopId, email })
            })
            .then(response => {
                if (response.ok) {
                    $('#addManagerModal').modal('hide');
                    document.getElementById('managerEmail').value = '';
                    loadManagers();
                } else {
                    return response.text().then(text => { throw new Error(text) });
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert(`Ошибка при добавлении менеджера: ${error.message}`);
            });
        }

        // Здесь  функции renderProducts, renderManagers, deleteProduct и removeManager
              function renderProducts(products) {
            const container = document.getElementById('productsList');

            if (!products || products.length === 0) {
                container.innerHTML = `
                    <div class="alert alert-info">
                        В магазине пока нет товаров. <a href="/AddProduct/@Model.Shop.Id" class="alert-link">Добавить первый товар</a>
                    </div>
                `;
                return;
            }

            let html = `
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead class="table-light">
                            <tr>
                                <th>Название</th>
                                <th>Цена</th>
                                <th>Описание</th>
                                <th>Действия</th>
                            </tr>
                        </thead>
                        <tbody>
            `;

            products.forEach(product => {
                html += `
                    <tr>
                        <td>${product.name || 'Не указано'}</td>
                        <td>${product.price ? `${product.price} ₽` : 'Не указана'}</td>
                        <td>${product.description || 'Нет описания'}</td>
                        <td>
                            <div class="btn-group btn-group-sm">
                                <a href="/EditProduct/${product.id}" class="btn btn-outline-primary" title="Редактировать">
                                    <i class="fas fa-edit"></i>
                                </a>
                                <button class="btn btn-outline-danger delete-product" data-id="${product.id}" title="Удалить">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                `;
            });

            html += `
                        </tbody>
                    </table>
                </div>
            `;

            container.innerHTML = html;

            // Добавляем обработчики для кнопок удаления
            document.querySelectorAll('.delete-product').forEach(btn => {
                btn.addEventListener('click', function() {
                    const productId = this.getAttribute('data-id');
                    if (confirm('Вы уверены, что хотите удалить этот товар?')) {
                        deleteProduct(productId);
                    }
                });
            });
        }

        function renderManagers(managers) {
            const container = document.getElementById('managersList');

            if (!managers || managers.length === 0) {
                container.innerHTML = `
                    <div class="alert alert-info">
                        В магазине пока нет менеджеров
                    </div>
                `;
                return;
            }

            let html = '<div class="list-group">';

            managers.forEach(manager => {
                html += `
                    <div class="list-group-item d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="mb-1">${manager.name || manager.email}</h6>
                            <small class="text-muted">${manager.email}</small>
                        </div>
                        <div>
                            <button class="btn btn-sm btn-outline-danger remove-manager" data-id="${manager.id}" title="Удалить">
                                <i class="fas fa-user-times"></i>
                            </button>
                        </div>
                    </div>
                `;
            });

            html += '</div>';
            container.innerHTML = html;

            // Добавляем обработчики для кнопок удаления
            document.querySelectorAll('.remove-manager').forEach(btn => {
                btn.addEventListener('click', function() {
                    const managerId = this.getAttribute('data-id');
                    if (confirm(`Вы уверены, что хотите удалить этого менеджера?`)) {
                        removeManager(managerId);
                    }
                });
            });
        }

        // Функция удаления товара
        function deleteProduct(productId) {
            fetch(`?handler=DeleteProduct&productId=${productId}`, {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
            .then(response => {
                if (response.ok) {
                    loadProducts();
                } else {
                    alert('Не удалось удалить товар');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Произошла ошибка при удалении товара');
            });
        }

        // Функция удаления менеджера
        function removeManager(managerId) {
            fetch(`?handler=RemoveManager&managerId=${managerId}&shopId=@Model.Shop.Id`, {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
            .then(response => {
                if (response.ok) {
                    loadManagers();
                } else {
                    alert('Не удалось удалить менеджера');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Произошла ошибка при удалении менеджера');
            });
        }


    </script>
}